.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "HPC::Runner::Command 3"
.TH HPC::Runner::Command 3 "2018-03-19" "perl v5.22.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
\fIproject\fR
.IX Subsection "project"
.PP
When submitting jobs we will prepend the jobname with the project name
.SH "NAME"
HPC::Runner::Command \- Create composable bioinformatics hpc analyses.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
To create a new project
.PP
.Vb 1
\&    hpcrunner.pl new MyNewProject
.Ve
.PP
To submit jobs to a cluster
.PP
.Vb 1
\&    hpcrunner.pl submit_jobs \-\-infile my_submission.sh
.Ve
.PP
To run jobs on an interactive queue or workstation
.PP
.Vb 1
\&    hpcrunner.pl single_node \-\-infile my_submission.sh
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
HPC::Runner::Command is a set of libraries for scaffolding data analysis projects,
submitting and executing jobs on an \s-1HPC\s0 cluster or workstation, and obsessively
logging results.
.PP
Get help by heading on over to github and raising an issue. GitHub .
.PP
Please see the complete documentation at HPC::Runner::Command GitBooks .
.SH "Quick Start \- Create a New Project"
.IX Header "Quick Start - Create a New Project"
You can create a new project, with a sane directory structure by using
.PP
.Vb 1
\&        hpcrunner.pl new MyNewProject
.Ve
.SH "Quick Start \- Submit Workflows"
.IX Header "Quick Start - Submit Workflows"
.SS "Simple Example"
.IX Subsection "Simple Example"
Our simplest example is a single job type with no dependencies \- each task is
independent of all other tasks.
.PP
\fIWorkflow file\fR
.IX Subsection "Workflow file"
.PP
.Vb 1
\&        #preprocess.sh
\&
\&        echo "preprocess" && sleep 10;
\&        echo "preprocess" && sleep 10;
\&        echo "preprocess" && sleep 10;
.Ve
.PP
\fISubmit to the scheduler\fR
.IX Subsection "Submit to the scheduler"
.PP
.Vb 1
\&        hpcrunner.pl submit_jobs \-\-infile preprocess.sh
.Ve
.PP
\fILook at results!\fR
.IX Subsection "Look at results!"
.PP
.Vb 1
\&        tree hpc\-runner
.Ve
.PP
\fIAudit your results\fR
.IX Subsection "Audit your results"
.PP
.Vb 2
\&  hpcrunner.pl stats \-h
\&  hpcrunner.pl stats
.Ve
.SS "Job Type Dependencency Declaration"
.IX Subsection "Job Type Dependencency Declaration"
Most of the time we have jobs that depend upon other jobs.
.PP
\fIWorkflow file\fR
.IX Subsection "Workflow file"
.PP
.Vb 1
\&        #blastx.sh
\&
\&        #HPC jobname=unzip
\&        unzip Sample1.zip
\&        unzip Sample2.zip
\&        unzip Sample3.zip
\&
\&        #HPC jobname=blastx
\&        #HPC deps=unzip
\&        blastx \-\-db env_nr \-\-sample Sample1.fasta
\&        blastx \-\-db env_nr \-\-sample Sample2.fasta
\&        blastx \-\-db env_nr \-\-sample Sample3.fasta
.Ve
.PP
\fISubmit to the scheduler\fR
.IX Subsection "Submit to the scheduler"
.PP
.Vb 1
\&        hpcrunner.pl submit_jobs \-\-infile preprocess.sh
.Ve
.PP
\fILook at results!\fR
.IX Subsection "Look at results!"
.PP
.Vb 1
\&        tree hpc\-runner
.Ve
.SS "Task Dependencency Declaration"
.IX Subsection "Task Dependencency Declaration"
Within a job type we can declare dependencies on particular tasks.
.PP
\fIWorkflow file\fR
.IX Subsection "Workflow file"
.PP
.Vb 1
\&        #blastx.sh
\&
\&        #HPC jobname=unzip
\&        #TASK tags=Sample1
\&        unzip Sample1.zip
\&        #TASK tags=Sample2
\&        unzip Sample2.zip
\&        #TASK tags=Sample3
\&        unzip Sample3.zip
\&
\&        #HPC jobname=blastx
\&        #HPC deps=unzip
\&        #TASK tags=Sample1
\&        blastx \-\-db env_nr \-\-sample Sample1.fasta
\&        #TASK tags=Sample2
\&        blastx \-\-db env_nr \-\-sample Sample2.fasta
\&        #TASK tags=Sample3
\&        blastx \-\-db env_nr \-\-sample Sample3.fasta
.Ve
.PP
\fISubmit to the scheduler\fR
.IX Subsection "Submit to the scheduler"
.PP
.Vb 1
\&        hpcrunner.pl submit_jobs \-\-infile preprocess.sh
.Ve
.PP
\fILook at results!\fR
.IX Subsection "Look at results!"
.PP
.Vb 1
\&        tree hpc\-runner
.Ve
.PP
\fIAudit your results\fR
.IX Subsection "Audit your results"
.PP
.Vb 2
\&  hpcrunner.pl stats \-h
\&  hpcrunner.pl stats
.Ve
.SS "Declare Scheduler Variables"
.IX Subsection "Declare Scheduler Variables"
Each scheduler has its own set of variables. HPC::Runner::Command has a set of
generalized variables for declaring types across templates. For more information
please see Job Scheduler
Comparison <https://biosails.gitbooks.io/hpc-runner-command-docs/content/job_submission/comparison.html>
.PP
Additionally, for workflows with a large number of tasks, please see
Considerations for Workflows with a Large Number of
Tasks <https://biosails.gitbooks.io/hpc-runner-command-docs/content/design_workflow.html#considerations-for-workflows-with-a-large-number-of-tasks>
for information on how to group tasks together.
.PP
\fIWorkflow file\fR
.IX Subsection "Workflow file"
.PP
.Vb 1
\&        #blastx.sh
\&
\&        #HPC jobname=unzip
\&        #HPC cpus_per_task=1
\&        #HPC partition=serial
\&        #HPC commands_per_node=1
\&  #HPC mem=4GB
\&        #TASK tags=Sample1
\&        unzip Sample1.zip
\&        #TASK tags=Sample2
\&        unzip Sample2.zip
\&        #TASK tags=Sample3
\&        unzip Sample3.zip
\&
\&        #HPC jobname=blastx
\&        #HPC cpus_per_task=6
\&        #HPC deps=unzip
\&        #TASK tags=Sample1
\&        blastx \-\-threads 6 \-\-db env_nr \-\-sample Sample1.fasta
\&        #TASK tags=Sample2
\&        blastx \-\-threads 6 \-\-db env_nr \-\-sample Sample2.fasta
\&        #TASK tags=Sample3
\&        blastx \-\-threads 6 \-\-db env_nr \-\-sample Sample3.fasta
.Ve
.PP
\fISubmit to the scheduler\fR
.IX Subsection "Submit to the scheduler"
.PP
.Vb 1
\&        hpcrunner.pl submit_jobs \-\-infile preprocess.sh
.Ve
.PP
\fILook at results!\fR
.IX Subsection "Look at results!"
.PP
.Vb 1
\&        tree hpc\-runner
.Ve
.PP
\fIAudit your results\fR
.IX Subsection "Audit your results"
.PP
.Vb 2
\&  hpcrunner.pl stats \-h
\&  hpcrunner.pl stats
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Jillian Rowe <jillian.e.rowe@gmail.com>
.SH "Previous Release"
.IX Header "Previous Release"
This software was previously released under HPC::Runner.
HPC::Runner::Command is a complete rewrite of the existing library. While it
is meant to have much of the same functionality, it is not backwords compatible.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
As of Version 2.41:
.PP
This modules continuing development is supported by \s-1NYU\s0 Abu Dhabi in the Center
for Genomics and Systems Biology. With approval from \s-1NYUAD,\s0 this information was
generalized and put on github, for which the authors would like to express
their gratitude.
.PP
Before Version 2.41
.PP
This module was originally developed at and for Weill Cornell Medical College in
Qatar within \s-1ITS\s0 Advanced Computing Team. With approval from WCMC-Q, this
information was generalized and put on github, for which the authors would like
to express their gratitude.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2016\- Jillian Rowe
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
